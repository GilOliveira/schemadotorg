<?php

/**
 * @file
 * Install, update and uninstall functions for the Schema.org Standard module.
 */

/**
 * Implements hook_install().
 */
function schemadotorg_demo_standard_install() {
  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
  $theme_installer = \Drupal::service('theme_installer');
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');

  // Enable the Gin admin theme.
  $theme_installer->install(['gin']);

  // Flush cache to enable the Gin admin theme.
  drupal_flush_all_caches();

  // Enable the Gin related modules.
  $module_installer->install(['gin_login', 'gin_lb', 'gin_toolbar']);

  // Configure the Gin admin theme.
  \Drupal::configFactory()->getEditable('system.theme')
    ->set('default', 'gin')
    ->set('admin', 'gin')
    ->save();
  \Drupal::configFactory()->getEditable('system.theme.global')
    ->set('features.node_user_picture', FALSE)
    ->save();
  \Drupal::configFactory()->getEditable('gin.settings')
    ->set('classic_toolbar', 'horizontal')
    ->set('show_description_toggle', TRUE)
    ->save();

  // Uninstall unused themes.
  $themes = ['bartik', 'olivero', 'seven'];
  $themes = array_combine($themes, $themes);
  foreach ($themes as $theme) {
    if (!$theme_handler->themeExists($theme)) {
      unset($themes[$theme]);
    }
  }
  if ($themes) {
    $theme_installer->uninstall($themes);
  }

  // Configure development settings.
  \Drupal::configFactory()->getEditable('system.logging')
    ->set('error_level', 'verbose')
    ->save();
  \Drupal::configFactory()->getEditable('devel.settings')
    ->set('devel_dumper', 'kint')
    ->save();

  // Add consumer image styles to the 'Default Consumer'.
  $consumer_storage = \Drupal::entityTypeManager()->getStorage('consumer');
  $consumer = $consumer_storage->load(1);
  if ($consumer) {
    $consumer->get('image_styles')->setValue([
      ['target_id' => 'large'],
      ['target_id' => 'medium'],
      ['target_id' => 'thumbnail'],
    ]);
    $consumer->save();
  }

  // Add shortcuts to key Schema.org Blueprints URLs.
  $shortcuts = [
    '/admin/reports/schemadotorg' => 'Browse Schema.org specification',
    '/admin/config/search/schemadotorg/sets' => 'Create Schema.org content models',
    '/admin/config/search/schemadotorg' => 'Configure Schema.org Blueprints',
    '/admin/help/schemadotorg'  => 'Learn more about Schema.org Blueprints',
    '/api/documentation' => 'Explore JSON:API OpenAPI Documentation',
  ];
  $weight = -18;
  $shortcut_storage = \Drupal::entityTypeManager()->getStorage('shortcut');
  foreach ($shortcuts as $path => $title) {
    $values = [
      'shortcut_set' => 'default',
      'title' => $title,
      'link' => ['uri' => 'internal:' . $path],
      'weight' => $weight,
    ];
    if (empty($shortcut_storage->loadByProperties($values))) {
      $shortcut_storage->create($values)->save();
      $weight++;
    }
  }

  // Create path aliases for /api/*.
  $path_alias_storage = \Drupal::entityTypeManager()->getStorage('path_alias');
  $path_aliases = [
    '/admin/config/services/openapi/redoc/jsonapi' => '/api/documentation',
    '/openapi/jsonapi' => '/api/openapi',
  ];
  foreach ($path_aliases as $path => $alias) {
    $values = ['path' => $path, 'alias' => $alias, 'langcode' => 'en'];
    if (empty($path_alias_storage->loadByProperties($values))) {
      $path_alias_storage->create($values)->save();
    }
  }

  // Make sure update status is checked.
  update_cron();
}
