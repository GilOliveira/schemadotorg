<?php

/**
 * @file
 * Provides an opinionated demo built on top of Drupal's standard profile.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\Random;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\filter\Entity\FilterFormat;

/**
 * Implements hook_help().
 */
function schemadotorg_demo_standard_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_entity_presave().
 */
function schemadotorg_demo_standard_entity_presave(EntityInterface $entity): void {
  // Check that devel is generating a content entity.
  // @see https://www.drupal.org/project/devel/issues/2582845
  if (empty($entity->devel_generate)
    || !$entity instanceof ContentEntityInterface) {
    return;
  }

  $random = new Random();

  $has_full_html = (boolean) FilterFormat::load('full_html');
  $field_definitions = $entity->getFieldDefinitions();
  foreach ($field_definitions as $field_name => $field_definition) {
    if (in_array($field_definition->getType(), ['text', 'text_with_summary'])) {
      // Improve generated text value and summary to make it easier demo a lot of data.
      $paragraphs = trim($random->paragraphs(4));
      $returns = PHP_EOL . PHP_EOL;
      $paragraphs = '<p>' . str_replace($returns, "</p>$returns<p>", $paragraphs) . '</p>';
      $entity->{$field_name}->value = $paragraphs;
      if (isset($entity->{$field_name}->summary)) {
        $entity->{$field_name}->summary = trim($random->paragraphs(1));
      }

      // Default generated formatted text fields to use the 'full_html' text format.
      if ($has_full_html) {
        $entity->{$field_name}->format = 'full_html';
      }
    }
  }
}

/**
 * Implements hook_schemadotorg_mapping_defaults().
 */
function schemadotorg_demo_standard_schemadotorg_mapping_defaults_alter(string $entity_type_id, string $bundle, string $schema_type, array &$defaults): void {
  // Handle unique case where the standard article content type is still using
  // the image field.
  if ($entity_type_id === 'node'
    && $bundle === 'article'
    && $schema_type === 'Article'
    && empty($defaults['properties']['image']['name'])
    && FieldStorageConfig::loadByName('node', 'field_image')
  ) {
    $defaults['properties']['image']['name'] = 'field_image';
  }
}
