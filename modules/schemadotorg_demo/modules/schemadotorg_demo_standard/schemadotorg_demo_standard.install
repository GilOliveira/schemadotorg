<?php

/**
 * @file
 * Installation hooks for the Schema.org Blueprints Demo Standard module.
 */

declare(strict_types = 1);

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_install().
 */
function schemadotorg_demo_standard_install(): void {
  // Configure development settings.
  \Drupal::configFactory()->getEditable('system.logging')
    ->set('error_level', 'verbose')
    ->save();
  \Drupal::configFactory()->getEditable('devel.settings')
    ->set('devel_dumper', 'kint')
    ->save();

  // Add consumer image styles to the 'Default Consumer'.
  $consumer_storage = \Drupal::entityTypeManager()->getStorage('consumer');
  $consumer = $consumer_storage->load(1);
  if ($consumer) {
    $consumer->get('image_styles')->setValue([
      ['target_id' => 'large'],
      ['target_id' => 'medium'],
      ['target_id' => 'thumbnail'],
    ]);
    $consumer->save();
  }

  // Add shortcuts linking to key Schema.org Blueprints URLs.
  $shortcuts = [
    '/admin/reports/schemadotorg' => 'Browse Schema.org specification',
    '/admin/config/search/schemadotorg/sets' => 'Create Schema.org content models',
    '/admin/help/schemadotorg'  => 'Learn more about Schema.org Blueprints',
    '/api/documentation' => 'Explore JSON:API OpenAPI Documentation',
    '/sitemap.xml' => 'Review Sitemap.xml',
  ];
  $weight = -18;
  $shortcut_storage = \Drupal::entityTypeManager()->getStorage('shortcut');
  foreach ($shortcuts as $path => $title) {
    $values = [
      'shortcut_set' => 'default',
      'title' => $title,
      'link' => ['uri' => 'internal:' . $path],
      'weight' => $weight,
    ];
    if (empty($shortcut_storage->loadByProperties($values))) {
      $shortcut_storage->create($values)->save();
      $weight++;
    }
  }

  // Create path aliases for /api/*.
  $path_alias_storage = \Drupal::entityTypeManager()->getStorage('path_alias');
  $path_aliases = [
    '/admin/config/services/openapi/redoc/jsonapi' => '/api/documentation',
    '/openapi/jsonapi' => '/api/openapi',
  ];
  foreach ($path_aliases as $path => $alias) {
    $values = ['path' => $path, 'alias' => $alias, 'langcode' => 'en'];
    if (empty($path_alias_storage->loadByProperties($values))) {
      $path_alias_storage->create($values)->save();
    }
  }

  // Remove comment fields and uninstall the comment.module.
  $field_config = FieldConfig::loadByName('node', 'article', 'comment');
  if ($field_config) {
    $field_config->delete();
  }
  $field_storage_config = FieldStorageConfig::loadByName('entity', 'comment');
  if ($field_storage_config) {
    $field_storage_config->delete();
  }
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');
  $module_installer->uninstall(['comment']);
  drupal_flush_all_caches();

  // Make sure update status is checked.
  update_cron();
}
