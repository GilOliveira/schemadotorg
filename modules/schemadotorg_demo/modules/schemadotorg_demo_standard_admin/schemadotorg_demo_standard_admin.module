<?php

/**
 * @file
 * Provides an opinionated demo of the Schema.org Blueprints.
 */

declare(strict_types = 1);

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;

/**
 * Implements hook_help().
 */
function schemadotorg_demo_standard_admin_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_page_attachments().
 */
function schemadotorg_demo_standard_admin_page_attachments(array &$page): void {
  // Attach CSS and JavaScript, that fixes minor UI issues with
  // minor UX enhancements.
  $page['#attached']['library'][] = 'schemadotorg_demo_standard_admin/schemadotorg_demo_standard_admin';
}

/**
 * Implements hook_toolbar_alter().
 */
function schemadotorg_demo_standard_admin_toolbar_alter(array &$items): void {
  // Tweak the Environment Indicator module's toolbar weights.
  $weights = [
    'environment_indicator' => 999,
  ];
  foreach ($weights as $name => $weight) {
    if (isset($items[$name])) {
      $items[$name]['#weight'] = $weight;
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function schemadotorg_demo_standard_admin_form_node_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  // Close the 'URL alias' details widget in the sidebar.
  $path_widget =& NestedArray::getValue($form, ['path', 'widget', '0']);
  $path_widget['#open'] = FALSE;
}

/**
 * Implements hook_link_alter().
 */
function schemadotorg_demo_standard_admin_link_alter(array &$variables): void {
  if (!isset($variables['url'])) {
    return;
  }

  /** @var \Drupal\Core\Url $url */
  $url = $variables['url'];
  if ($url->isRouted() && $url->getRouteName() === 'entity_print.view') {
    // Style entity print links as buttons.
    $variables['options']['attributes']['class'] = array_merge(
      $variables['options']['attributes']['class'],
      ['button', 'button--small']
    );
  }
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function schemadotorg_demo_standard_admin_field_widget_office_hours_default_form_alter(array &$element, FormStateInterface $form_state, array $context): void {
  foreach (Element::children($element['value']) as $key) {
    $element['value'][$key]['#process'] = [
      // phpcs:ignore
      [\Drupal\office_hours\Element\OfficeHoursWeekSlot::class, 'processOfficeHoursSlot'],
      '_schemadotorg_demo_standard_admin_field_widget_office_hours_default_process',
    ];
  }
}

/**
 * Process office hours table row and convert links to extra small buttons.
 */
function _schemadotorg_demo_standard_admin_field_widget_office_hours_default_process(array &$element, FormStateInterface $form_state, array $context): array {
  foreach ($element['operations']['data'] as &$link) {
    if (isset($link['#type'])) {
      $link['#attributes']['class'][] = 'button';
      $link['#attributes']['class'][] = 'button--extrasmall';
    }
  }
  return $element;
}

/**
 * Implepents hook_entity_view_alter().
 */
function schemadotorg_demo_standard_admin_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($entity->getEntityTypeId() !== 'node'
    && $entity->getEntityTypeId() !== 'paragraph') {
    return;
  }

  $mapping = SchemaDotOrgMapping::loadByEntity($entity);
  if (!$mapping || !str_ends_with($mapping->getSchemaType(), 'Gallery')) {
    return;
  }

  $build['#attributes']['class'][] = 'schemadotorg-demo-slick';
  $build['#attached']['library'][] = 'schemadotorg_demo_standard_admin/schemadotorg_demo_standard_admin.slick';
}

/**
 * Implements hook_entity_view_alter().
 */
function schemadotorg_demo_standard_admin_paragraph_view_alter(array &$build, ParagraphInterface $paragraph, EntityViewDisplayInterface $display): void {
  switch ($paragraph->bundle()) {
    case 'quotation':
      if (isset($build['schema_text'][0])) {
        $build['schema_text'][0]['#prefix'] = '<blockquote>';
        $build['schema_text'][0]['#suffix'] = '</blockquote>';
      }
      if (isset($build['schema_creator'][0])) {
        $build['schema_creator'][0]['#prefix'] = '<address>-- ';
        $build['schema_creator'][0]['#suffix'] = '</address>';
      }
      break;

    case 'item_list':
      $items = [];
      foreach (Element::children($build['schema_item_list_element']) as $key) {
        $items[] = $build['schema_item_list_element'][$key];
      }
      $build['schema_item_list_element'] = [
        '#theme' => 'item_list',
        '#items' => $items,
      ];
      break;

  }

}
