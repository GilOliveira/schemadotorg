<?php

/**
 * @file
 * Installation hooks for the Schema.org Blueprints Demo Next.js module.
 */

declare(strict_types = 1);

/**
 * Implements hook_install().
 */
function schemadotorg_demo_next_install(): void {
  /** @var \Drupal\user\UserStorageInterface $user_storage */
  $user_storage = \Drupal::entityTypeManager()->getStorage('user');

  // Create next account used for basic authentication preview.
  $accounts = $user_storage->loadByProperties(['name' => 'next']);
  if ($accounts) {
    $account = reset($accounts);
  }
  else {
    $account = $user_storage->create([
      'name' => 'next',
      'pass' => 'next',
      'mail' => 'next@example.com',
      'roles' => ['schemadotorg_demo_next'],
      'status' => TRUE,
    ]);
    $account->save();
  }

  /** @var \Drupal\consumers\ConsumerStorage $consumer_storage */
  $consumer_storage = \Drupal::entityTypeManager()->getStorage('consumer');
  $consumers = $consumer_storage->loadByProperties(['uuid' => '00000000-0000-0000-0000-000000000000']);
  if (!$consumers) {
    $image_styles = \Drupal::config('schemadotorg_focal_point.settings')
      ->get('image_styles');
    $image_style_values = [];
    foreach (array_keys($image_styles) as $image_style_name) {
      $image_style_values[] = ['target_id' => $image_style_name];
    }

    $consumer = $consumer_storage->create([
      'label' => 'Schema.org Blueprints Next.js Demo',
      'description' => 'This is demo account intended to be used with the schemadotorg_demo_app. @see https://www.drupal.org/sandbox/jrockowitz/3305940',
      'uuid' => '00000000-0000-0000-0000-000000000000',
      'secret' => 'secret',
      'roles' => [
        ['target_id' => 'schemadotorg_demo_next'],
      ],
      'user_id' => [
        ['target_id' => $account->id()],
      ],
      'image_styles' => $image_style_values,
    ]);
    $consumer->save();
  }

  // Set Oauth public and private keys.
  // (i.e. /Users/USER/Sites/drupal_next/keys)
  $key_directory = dirname(\Drupal::root()) . '/keys';
  \Drupal::configFactory()->getEditable('simple_oauth.settings')
    ->set('public_key', $key_directory . '/public.key')
    ->set('private_key', $key_directory . '/private.key')
    ->save();
}
