<?php

/**
 * @file
 * Integrates Schema.org mappings with Drupal core's RDF(a) mapping.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\EntityInterface;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_rdf_help(string $route_name, RouteMatchInterface $route_match): string|array|null {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function schemadotorg_rdf_schemadotorg_mapping_insert(SchemaDotOrgMappingInterface $schemadotorg_mapping): void {
  $entity_type_id = $schemadotorg_mapping->getTargetEntityTypeId();
  $bundle = $schemadotorg_mapping->getTargetBundle();
  $schema_type = $schemadotorg_mapping->getSchemaType();
  $schema_properties = $schemadotorg_mapping->getSchemaProperties();

  $rdf_mapping = rdf_get_mapping($entity_type_id, $bundle);

  // Set the bundle mapping.
  $rdf_mapping->setBundleMapping(['types' => ['schema:' . $schema_type]]);

  // Reset all field mappings.
  $rdf_mapping->set('fieldMappings', []);

  // Set each individual field mapping.
  foreach ($schema_properties as $field_name => $schema_property) {
    $rdf_mapping->setFieldMapping($field_name, [
      'properties' => ['schema:' . $schema_property],
    ]);
  }

  $rdf_mapping->save();
}

/**
 * Implements hook_ENTITY_TYPE_update().
 */
function schemadotorg_rdf_schemadotorg_mapping_update(SchemaDotOrgMappingInterface $schemadotorg_mapping): void {
  schemadotorg_rdf_schemadotorg_mapping_insert($schemadotorg_mapping);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function schemadotorg_rdf_schemadotorg_mapping_delete(SchemaDotOrgMappingInterface $schemadotorg_mapping): void {
  $entity_type_id = $schemadotorg_mapping->getTargetEntityTypeId();
  $bundle = $schemadotorg_mapping->getTargetBundle();
  $rdf_mapping = rdf_get_mapping($entity_type_id, $bundle);
  $rdf_mapping->delete();
}

/**
 * Implements hook_preprocess_HOOK() for user templates.
 *
 * @see rdf_preprocess_user()
 */
function schemadotorg_rdf_preprocess_user(array &$variables): void {
  _schemadotorg_rdf_preprocess_entity($variables, $variables['elements']['#user']);
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 *
 * @see rdf_preprocess_node()
 */
function schemadotorg_rdf_preprocess_node(array &$variables): void {
  _schemadotorg_rdf_preprocess_entity($variables, $variables['node']);
}

/**
 * Replace the entity's RDF Schema.org type with the Schema.org subtype.
 *
 * @param array &$variables
 *   The entity's template variables.
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The entity.
 */
function _schemadotorg_rdf_preprocess_entity(array &$variables, EntityInterface $entity): void {
  $mapping = SchemaDotOrgMapping::loadByEntity($entity);

  if (!$mapping) {
    return;
  }

  // Get the Schema.org subtype.
  $subtype_field_name = $mapping->getSchemaPropertyFieldName('subtype');
  if (!$subtype_field_name
    || !$entity->hasField($subtype_field_name)
    || empty($entity->get($subtype_field_name)->value)
  ) {
    return;
  }

  // Replace the typeof attribute with the subtype
  // (i.e. schema:Event => schema:BusinessEvent).
  $schema_type = $mapping->getSchemaType();
  $schema_subtype = $entity->get($subtype_field_name)->value;
  foreach ($variables['attributes']['typeof'] as $index => $typeof) {
    if ($typeof === "schema:$schema_type") {
      $variables['attributes']['typeof'][$index] = "schema:$schema_subtype";
    }
  }
}
