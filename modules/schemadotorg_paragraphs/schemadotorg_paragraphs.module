<?php

/**
 * @file
 * Integrates the Paragraphs with the Schema.org Blueprints module.
 */

use Drupal\Core\Field\FieldItemInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\paragraphs\ParagraphInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
use Drupal\schemadotorg\SchemaDotOrgMappingInterface;

/**
 * Implements hook_help().
 */
function schemadotorg_paragraphs_help($route_name, RouteMatchInterface $route_match) {
  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->buildHelpPage($route_name, $route_match);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function schemadotorg_paragraphs_schemadotorg_mapping_presave(SchemaDotOrgMappingInterface $mapping) {
  if (!$mapping->isNew() || $mapping->getTargetEntityTypeId() !== 'paragraph') {
    return;
  }

  $schema_type = $mapping->getSchemaType();
  if (!_schemadotorg_paragraphs_use_library($schema_type)) {
    return;
  }

  /** @var \Drupal\paragraphs\ParagraphsTypeInterface $paragraph_type */
  $paragraph_type = $mapping->getTargetEntityBundleEntity();
  $paragraph_type->setThirdPartySetting('paragraphs_library', 'allow_library_conversion', TRUE);
  $paragraph_type->save();
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_paragraphs_schemadotorg_property_field_alter(
  $schema_type,
  $schema_property,
  array &$field_storage_values,
  array &$field_values,
  &$widget_id,
  array &$widget_settings,
  &$formatter_id,
  array &$formatter_settings
) {
  // Check that the field is an entity_reference_revisions type that is
  // targeting paragraphs.
  if ($field_storage_values['type'] !== 'entity_reference_revisions'
    || $field_storage_values['settings']['target_type'] !== 'paragraph') {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorage $mapping_storage */
  $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');

  // If any of the target bundles use the Paragraphs library,
  // append 'from_library' to target bundles.
  $target_type = $field_storage_values['settings']['target_type'];
  $target_bundles = $field_values['settings']['handler_settings']['target_bundles'];
  foreach ($target_bundles as $target_bundle) {
    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $target_mapping */
    $target_mappings = $mapping_storage->loadByProperties([
      'target_entity_type_id' => $target_type,
      'target_bundle' => $target_bundle,
    ]);
    if (!$target_mappings) {
      continue;
    }

    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $target_mapping */
    $target_mapping = reset($target_mappings);
    $target_schema_type = $target_mapping->getSchemaType();
    if (_schemadotorg_paragraphs_use_library($target_schema_type)) {
      $target_bundles['from_library'] = 'from_library';
      break;
    }
  }

  // Set the target bundles drag and drop order.
  $handler_settings = $field_values['settings']['handler_settings'];
  $handler_settings['target_bundles_drag_drop'] = [];
  $weight = 0;
  foreach ($target_bundles as $target_bundle) {
    $handler_settings['target_bundles_drag_drop'][$target_bundle] = [
      'weight' => $weight,
      'enabled' => TRUE,
    ];
    $weight++;
  }

  $field_values['settings']['handler_settings'] = $handler_settings;
  $field_values['settings']['handler_settings']['target_bundles'] = $target_bundles;

  // Widget.
  $widget_id = 'paragraphs';

  // Set the default paragraph type to 'none', to provide a cleaner initial UX
  // because all Schema.org fields/properties are optional.
  $widget_settings['default_paragraph_type'] = '_none';
}

/**
 * Implements hook_schemadotorg_jsonld_schema_property_alter().
 */
function schemadotorg_paragraphs_schemadotorg_jsonld_schema_property_alter(&$value, FieldItemInterface $item) {
  // Make sure the Paragraphs Library module is enabled.
  if (!\Drupal::moduleHandler()->moduleExists('paragraphs_library')) {
    return;
  }

  $field_storage_definition = $item->getFieldDefinition()->getFieldStorageDefinition();
  // Check that the field is an entity_reference_revisions type that is
  // targeting paragraphs.
  if ($field_storage_definition->getType() !== 'entity_reference_revisions'
    || $field_storage_definition->getSetting('target_type') !== 'paragraph') {
    return;
  }

  // Check that the value is NOT NULL.
  if (!is_null($value)) {
    return;
  }

  // Check that the item entity is a paragraph from the
  // Paragraphs library.
  if (empty($item->entity)
    || !$item->entity instanceof ParagraphInterface
    || $item->entity->getType() !== 'from_library') {
    return;
  }

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $from_library_paragraph = $item->entity;
  if (!$from_library_paragraph->hasField('field_reusable_paragraph')
    || empty($from_library_paragraph->field_reusable_paragraph->entity)) {
    return;
  }

  /** @var \Drupal\paragraphs_library\LibraryItemInterface $from_library_item */
  $from_library_item = $from_library_paragraph->field_reusable_paragraph->entity;
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $from_library_item->paragraphs->entity;
  if (!$from_library_item->hasField('paragraphs')
    || empty($from_library_item->paragraphs->entity)) {
    return;
  }

  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $jsonld_builder */
  $jsonld_builder = \Drupal::service('schemadotorg_jsonld.builder');

  // Build the paragraphs JSON-LD.
  $value = $jsonld_builder->buildEntity($paragraph, ['identifier' => FALSE]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_paragraphs_form_schemadotorg_types_settings_form_alter(&$form, FormStateInterface $form_state) {
  if (!\Drupal::moduleHandler()->moduleExists('paragraphs_library')) {
    return;
  }

  $config = \Drupal::configFactory()->getEditable('schemadotorg_paragraphs.settings');

  $form['schemadotorg_paragraphs'] = [
    '#type' => 'details',
    '#title' => t('Paragraphs settings'),
    '#open' => TRUE,
    '#tree' => TRUE,
  ];
  $form['schemadotorg_paragraphs']['paragraphs_library'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::INDEXED,
    '#settings_format' => 'SchemaType',
    '#title' => t('Schema.org types that default to using the Paragraphs library'),
    '#description' => t('Enter Schema.org types that default to using the Paragraphs library.'),
    '#description_link' => 'types',
    '#default_value' => $config->get('paragraphs_library'),
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_paragraphs_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_paragraphs_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_paragraphs_settings_form_submit(&$form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_paragraphs.settings');
  $values = $form_state->getValue('schemadotorg_paragraphs');
  foreach ($values as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();
}

/**
 * Check if a Schema.org type should allow adding to Paragraphs library.
 *
 * @param string $type
 *   The Schema.org type.
 *
 * @return bool
 *   TRUE if a Schema.org type should allow adding to Paragraphs library.
 */
function _schemadotorg_paragraphs_use_library($type) {
  if (!\Drupal::moduleHandler()->moduleExists('paragraphs_library')) {
    return FALSE;
  }

  $paragraphs_library = \Drupal::configFactory()
    ->get('schemadotorg_paragraphs.settings')
    ->get('paragraphs_library');

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  return $schema_type_manager->isSubTypeOf($type, $paragraphs_library);
}
