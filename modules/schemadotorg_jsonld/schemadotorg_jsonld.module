<?php

/**
 * @file
 * Adds Schema.org's structured data as JSON LD in the head of web pages.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;

/**
 * Implements hook_page_attachments_alter().
 */
function schemadotorg_jsonld_page_attachments_alter(array &$attachments) {
  if (empty($attachments['#attached']['html_head'])) {
    return;
  }

  $entity = schemadotorg_jsonld_get_route_entity();
  if (!$entity) {
    return;
  }

  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $builder */
  $builder = \Drupal::service('schemadotorg_jsonld.builder');
  $data = $builder->build($entity);
  if (!$data) {
    return;
  }

  $preprocess = \Drupal::config('system.performance')->get('js.preprocess');
  $json = json_encode($data, $preprocess ? 0 : JSON_PRETTY_PRINT);
  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'script',
      '#value' => $json,
      '#attributes' => ['type' => 'application/ld+json'],
    ],
    'schemadotorg_jsonld',
  ];
}


/**
 * Implements hook_entity_view_alter().
 */
function schemadotorg_jsonld_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  if ($build['#view_mode'] !== 'full') {
    return;
  }

  if (!\Drupal::currentUser()->hasPermission('view schemadotorg jsonld')) {
    return;
  }

  $route_entity = schemadotorg_jsonld_get_route_entity();
  if (!$route_entity || ($route_entity !== $entity)) {
    return;
  }

  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $builder */
  $builder = \Drupal::service('schemadotorg_jsonld.builder');
  $data = $builder->build($entity);
  if (!$data) {
    return;
  }

  $jsonld_url = Url::fromRoute(
    'schemadotorg_jsonld.' . $entity->getEntityTypeId(),
    ['entity' => $entity->id()],
    ['absolute' => TRUE],
  );

  $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
  // Escape HTML special characters.
  $json_markup = htmlspecialchars($json);
  // Add <span> tag to properties.
  $json_markup = preg_replace('/&quot;([^&]+)&quot;: /', '<span>&quot;$1&quot;</span>": ', $json_markup);
  // Add links to URLs.
  $json_markup = preg_replace('@(https?://([-\w\.]+)+(:\d+)?(/([\w/_\.-]*(\?\S+)?)?)?)@', '<a href="$1">$1</a>', $json_markup);

  $t_args = [':href' => 'https://validator.schema.org/',];

  $build['schemadotorg_jsonid'] = [
    '#type' => 'details',
    '#title' => t('Schema.org JSON-LD'),
    '#weight' => 1000,
    '#attached' => ['library' => ['schemadotorg_jsonld/schemadotorg_jsonld']],
    '#attributes' => ['class' => ['schemadotorg-jsonld', 'js-schemadotorg-jsonld']],
    'copy' => [
      '#type' => 'container',
      '#attributes' => ['class' => ['schemadotorg-jsonld-copy']],
      'description' => [
        '#type' => 'container',
        '#markup' => t('Please copy-n-paste the below JSON-LD into the <a href=":href">Schema Markup Validator</a>.', $t_args),
      ],
      'button' => [
        '#type' => 'button',
        '#button_type' => 'small',
        '#attributes' => ['class' => ['schemadotorg-jsonld-copy-button', 'button--extrasmall']],
        '#value' => t('Copy JSON-LD'),
      ],
      'message' => [
        '#type' => 'html_tag',
        '#tag' => 'span',
        '#attributes' => ['class' => ['schemadotorg-jsonld-copy-message']],
        '#plain_text' => t('JSON-LD copied to clipboardâ€¦'),
      ],
    ],
    'json' => [
      '#type' => 'hidden',
      '#value' => $json,
    ],
    'markup' => [
      '#type' => 'html_tag',
      '#tag' => 'pre',
      '#attributes' => ['class' => ['schemadotorg-jsonld-javascript']],
      'content' => ['#markup' => $json_markup],
    ],
    'url' => [
      '#type' => 'link',
      '#url' => $jsonld_url,
      '#title' => $jsonld_url->toString(),
      '#prefix' => t('JSON-LD URI:') . ' ',
    ],
  ];
}

/**
 * Returns the entity of the current route.
 *
 * @return Drupal\Core\Entity\EntityInterface|null
 *   The entity or NULL if this is not an entity route.
 *
 * @see metatag_get_route_entity()
 */
function schemadotorg_jsonld_get_route_entity() {
  $route_match = \Drupal::routeMatch();
  $route_name = $route_match->getRouteName();
  if (!preg_match('/entity\.(.*)\.(latest[_-]version|canonical)/', $route_name, $matches)) {
    return NULL;
  }
  return $route_match->getParameter($matches[1]);
}
