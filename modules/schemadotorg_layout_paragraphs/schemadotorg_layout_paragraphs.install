<?php

/**
 * @file
 * Installation hooks for the Schema.org Blueprints Layout Paragraphs module.
 */

declare(strict_types = 1);

use Drupal\paragraphs\Entity\ParagraphsType;

/**
 * Implements hook_install().
 */
function schemadotorg_layout_paragraphs_install(bool $is_syncing): void {
  if ($is_syncing) {
    return;
  }

  // Setting weight to 1 so that the Schema.org Layout Paragraphs hooks
  // are triggered after the Schema.org Paragraphs module.
  module_set_weight('schemadotorg_layout_paragraphs', 1);

  // Create default paragraph types.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingManagerInterface $mapping_manager */
  $mapping_manager = \Drupal::service('schemadotorg.mapping_manager');
  $schema_types = [
    'quotation' => 'Quotation',
    'item_list' => 'ItemList',
    'statement' => 'Statement',
  ];
  foreach ($schema_types as $paragraph_type => $schema_type) {
    if (!ParagraphsType::load($paragraph_type)) {
      $mapping_manager->createType('paragraph', $schema_type);
    }
  }

  // Create file icons for paragraph types.
  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
  $file_system = \Drupal::service('file_system');
  /** @var \Drupal\Core\Extension\ModuleExtensionList $module_extension_list */
  $module_extension_list = \Drupal::service("extension.list.module");

  $path = $module_extension_list->getPath('schemadotorg_layout_paragraphs') . '/images/icons';
  $files = $file_system->scanDirectory($path, '/\.svg$/');
  foreach ($files as $file) {
    $paragraph_type = ParagraphsType::load($file->name);
    if ($paragraph_type) {
      $file_entity = File::create(['uri' => $file->uri]);
      $file_entity->save();
      $paragraph_type
        ->set('icon_uuid', $file_entity->uuid())
        ->save();
    }
  }
}
