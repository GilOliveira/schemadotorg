<?php

/**
 * @file
 * Provides mappings from taxonomy vocabularies and terms to Schema.org.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;

/* ************************************************************************** */
// JSON-LD.
/* ************************************************************************** */

/**
 * Implements hook_schemadotorg_jsonld_entity_load().
 */
function schemadotorg_taxonomy_schemadotorg_jsonld_entity_load(array &$data, EntityInterface $entity) {
  /** @var \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyJsonLdManager $taxonomy_jsonld_manager */
  $taxonomy_jsonld_manager = \Drupal::service('schemadotorg_taxonomy.jsonld_manager');
  $taxonomy_jsonld_manager->load($data, $entity);
}

/**
 * Implements hook_schemadotorg_jsonld_entity_alter().
 */
function schemadotorg_taxonomy_schemadotorg_jsonld_entity_alter(array &$data, EntityInterface $entity) {
  /** @var \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyJsonLdManager $taxonomy_jsonld_manager */
  $taxonomy_jsonld_manager = \Drupal::service('schemadotorg_taxonomy.jsonld_manager');
  $taxonomy_jsonld_manager->alter($data, $entity);
}

/**
 * Implements hook_preprocess_html().
 */
function schemadotorg_taxonomy_preprocess_html(array &$variables) {
  // Make sure the Schema.org JSON-LD module exists.
  if (!\Drupal::moduleHandler()->moduleExists('schemadotorg_jsonld')) {
    return;
  }

  /** @var \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyJsonLdManager $taxonomy_jsonld_manager */
  $taxonomy_jsonld_manager = \Drupal::service('schemadotorg_taxonomy.jsonld_manager');
  $taxonomy_jsonld_manager->preprocessHtml($variables);
}

/* ************************************************************************** */
// Default property vocabulary.
/* ************************************************************************** */

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_taxonomy_form_schemadotorg_properties_settings_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_taxonomy.settings');

  $form['taxonomy_property_vocabularies'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE_GROUPED,
    '#settings_format' => 'propertyName|id:vocabulary_id,label:Vocabulary name,description: Vocabulary description goes here',
    '#title' => t('Default vocabulary properties'),
    '#description' => t('Enter Schema.org properties that should be mapped to a vocabulary.')
    . '<br/>'
    . t('If the mapped vocabulary does exist it will be created when the Schema.org property mapping is created.'),
    '#default_value' => $config->get('property_vocabularies'),
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_taxonomy_form_schemadotorg_properties_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form().
 *
 * @see schemadotorg_taxonomy_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_taxonomy_form_schemadotorg_properties_settings_form_submit(&$form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('schemadotorg_taxonomy.settings')
    ->set('property_vocabularies', $form_state->getValue('taxonomy_property_vocabularies'))
    ->save();
}

/**
 * Implements hook_schemadotorg_property_field_type_alter().
 */
function schemadotorg_taxonomy_schemadotorg_property_field_type_alter(array &$field_types, $type, $property) {
  /** @var \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyPropertyVocabularyManagerInterface $taxonomy_property_vocabulary_manager */
  $taxonomy_property_vocabulary_manager = \Drupal::service('schemadotorg_taxonomy.property_vocabulary_manager');
  $taxonomy_property_vocabulary_manager->propertyFieldTypeAlter($field_types, $type, $property);
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_taxonomy_schemadotorg_property_field_alter(
  $type,
  $property,
  array &$field_storage_values,
  array &$field_values,
  &$widget_id,
  array &$widget_settings,
  &$formatter_id,
  array &$formatter_settings
) {
  /** @var \Drupal\schemadotorg_taxonomy\SchemaDotOrgTaxonomyPropertyVocabularyManagerInterface $taxonomy_property_vocabulary_manager */
  $taxonomy_property_vocabulary_manager = \Drupal::service('schemadotorg_taxonomy.property_vocabulary_manager');
  $taxonomy_property_vocabulary_manager->propertyFieldAlter(
    $type,
    $property,
    $field_storage_values,
    $field_values,
    $widget_id,
    $widget_settings,
    $formatter_id,
    $formatter_settings
  );
}
