<?php

/**
 * @file
 * Sets entity/field descriptions to their corresponding Schema.org comments.
 */

use Drupal\Core\Config\Entity\ConfigEntityBundleBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\FieldConfigInterface;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;
use Drupal\schemadotorg_ui\Form\SchemaDotOrgUiMappingForm;

/**
 * Implements hook_help().
 */
function schemadotorg_descriptions_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name === 'schemadotorg_descriptions.settings') {
    return '<p>' . t('The <strong>Schema.org descriptions settings</strong> page allows administrators to configure the descriptions for Schema.org types and properties.') . '<p>';
  }
}

/**
 * Implements hook_entity_load().
 */
function schemadotorg_descriptions_entity_load(array $entities, $entity_type_id) {
  // Only alter description on the entity type collection page.
  if (\Drupal::routeMatch()->getRouteName() !== "entity.$entity_type_id.collection") {
    return;
  }

  /** @var \Drupal\Core\Config\Entity\ConfigEntityType $entity_type_definition */
  $entity_type_definition = \Drupal::entityTypeManager()->getDefinition($entity_type_id);
  $target_entity_type_id = $entity_type_definition->getBundleOf();

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface $schema_type_builder */
  $schema_type_builder = \Drupal::service('schemadotorg.schema_type_builder');

  $options = ['base_path' => 'https://schema.org/'];
  $trim_descriptions = \Drupal::config('schemadotorg_descriptions.settings')
    ->get('trim_descriptions');
  $custom_descriptions = \Drupal::config('schemadotorg_descriptions.settings')
    ->get('custom_descriptions');

  /** @var \Drupal\Core\Entity\EntityInterface[] $entities */
  foreach ($entities as $entity) {
    // Only set description for config entity bundles and if it is empty.
    if (!$entity instanceof ConfigEntityBundleBase || !empty($entity->get('description'))) {
      continue;
    }

    // Get mapping for target entity type and bundle.
    $target_bundle = $entity->id();
    $mapping = SchemaDotOrgMapping::load("$target_entity_type_id.$target_bundle");
    if (!$mapping) {
      continue;
    }

    $schema_type = $mapping->getSchemaType();
    if (array_key_exists($schema_type, $custom_descriptions)) {
      $description = $custom_descriptions[$schema_type];
    }
    else {
      $type_definition = $schema_type_manager->getType($schema_type);
      $comment = $type_definition['comment'];
      // Trim description.
      if ($trim_descriptions && $comment && strpos($comment, '<br/><br/>') !== FALSE) {
        [$comment] = explode('<br/><br/>', $comment);
        $comment .= ' <a href="/' . $schema_type . '">Learn more</a>';
      }
      $description = $schema_type_builder->formatComment($comment, $options);
    }

    if ($description) {
      $entity->set('description', $description);
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function schemadotorg_descriptions_form_schemadotorg_mapping_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (!\Drupal::moduleHandler()->moduleExists('schemadotorg_ui')) {
    return;
  }

  $add_field = SchemaDotOrgUiMappingForm::ADD_FIELD;

  // Unset the entity's default value and append a note to the description.
  if (isset($form['entity']['description'])) {
    $form['entity']['description']['#default_value'] = '';
    $form['entity']['description']['#description'] .= '<br/>'
     . '<strong>' . t("If left blank, the description will be automatically set to the corresponding Schema.org type's comment.") . '</strong>';
  }

  // Unset each field's default value and append a note to the description.
  if (isset($form['properties'])) {
    foreach ($form['properties'] as &$element) {
      if (isset($element['field'][$add_field]['description'])) {
        $element['field'][$add_field]['description']['#default_value'] = '';
        $element['field'][$add_field]['description']['#description'] .= '<br/>'
          . '<strong>' . t("If left blank, the description will be automatically set to the corresponding Schema.org property's comment.") . '</strong>';
      }
    }
  }

  // Append a note to the subtype description.
  if (isset($form['subtype'][$add_field]['description'])) {
    $form['subtype'][$add_field]['description']['#default_value'] = '';
    $form['subtype'][$add_field]['description']['#description'] .= '<br/>'
      . '<strong>' . t("If left blank, the description will be automatically set.") . '</strong>';
  }
}

/**
 * Implements hook_entity_prepare_form().
 */
function schemadotorg_descriptions_entity_prepare_form(EntityInterface $entity, $operation, FormStateInterface $form_state) {
  if ($entity instanceof ConfigEntityBundleBase) {
    $target_entity_type_id = $entity->getEntityType()->getBundleOf();
    $target_bundle = $entity->id();
    $mapping = SchemaDotOrgMapping::load("$target_entity_type_id.$target_bundle");
    if (!$mapping) {
      return;
    }

    $form_state->set('schemadotorg_descriptions', TRUE);
  }
  elseif ($entity instanceof FieldConfigInterface) {
    $target_entity_type_id = $entity->getTargetEntityTypeId();
    $target_bundle = $entity->getTargetBundle();
    $field_name = $entity->getName();

    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
    $mapping = SchemaDotOrgMapping::load("$target_entity_type_id.$target_bundle");
    if (!$mapping || !$mapping->getSchemaPropertyMapping($field_name)) {
      return;
    }

    $form_state->set('schemadotorg_descriptions', TRUE);
  }
}

/**
 * Implements hook_form_alter().
 */
function schemadotorg_descriptions_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->get('schemadotorg_descriptions')
    && isset($form['description']['#description'])) {
    $form['description']['#description'] .= '<br/>'
      . '<strong>' . t("If left blank, the description will be automatically set to the corresponding Schema.org type's comment") . '</strong>';
  }
}

/**
 * Implements hook_schemadotorg_bundle_entity_alter().
 */
function schemadotorg_descriptions_schemadotorg_bundle_entity_alter($schema_type, $entity_type_id, &$values) {
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface $schema_type_builder */
  $schema_type_builder = \Drupal::service('schemadotorg.schema_type_builder');

  $definition = $schema_type_manager->getType($schema_type);
  $description = $schema_type_builder->formatComment($definition['comment'], ['base_path' => 'https://schema.org/']);
  if ($values['description'] === $description) {
    $values['description'] = '';
  }
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_descriptions_schemadotorg_property_field_alter(
  $type,
  $property,
  array &$field_storage_values,
  array &$field_values,
  &$widget_id,
  array &$widget_settings,
  &$formatter_id,
  array &$formatter_settings
) {
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeBuilderInterface $schema_type_builder */
  $schema_type_builder = \Drupal::service('schemadotorg.schema_type_builder');

  // Check Schema.org property and subtype for description.
  $property_definition = $schema_type_manager->getProperty($property);
  if ($property_definition) {
    $description = $schema_type_builder->formatComment($property_definition['comment'], ['base_path' => 'https://schema.org/']);
  }
  elseif ($property === 'subtype') {
    $description = \Drupal::configFactory()
      ->get('schemadotorg_subtype.settings')
      ->get('default_field_description');
  }
  else {
    $description = NULL;
  }

  // Unset the field's description if it has not been altered.
  if ($field_values['description'] === $description) {
    $field_values['description'] = '';
  }
}
