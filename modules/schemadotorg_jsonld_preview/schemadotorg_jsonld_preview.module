<?php

/**
 * @file
 * Allows users to preview a web page's Schema.org JSON-LD.
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_jsonld_preview_form_schemadotorg_jsonld_settings_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('schemadotorg_jsonld_preview.settings');

  // Load the request path condition plugin.
  /** @var \Drupal\Core\Condition\ConditionManager $condition_manager */
  $condition_manager = \Drupal::service('plugin.manager.condition');
  $condition = $condition_manager->createInstance('request_path');

  // Set the request path condition configuration.
  $condition->setConfiguration($config->get('request_path'));

  // Append the request path condition configuration form.
  $form['schemadotorg_jsonld_preview'] = [
    '#type' => 'details',
    '#title' => t('JSON-LD preview visibility'),
    '#description' => t('Use the below configuration settings to determine what pages the JSON-LD preview is displayed on.'),
    '#open' => TRUE,
    '#tree' => TRUE
  ];
  $form['schemadotorg_jsonld_preview'] = $condition->buildConfigurationForm($form['schemadotorg_jsonld_preview'], $form_state);

  // Check negate checkbox to radio so that it aligned with the Block UI.
  // @see \Drupal\block\BlockForm::buildVisibilityInterface
  $form['schemadotorg_jsonld_preview']['negate']['#type'] = 'radios';
  $form['schemadotorg_jsonld_preview']['negate']['#default_value'] = (int) $form['schemadotorg_jsonld_preview']['negate']['#default_value'];
  $form['schemadotorg_jsonld_preview']['negate']['#title_display'] = 'invisible';
  $form['schemadotorg_jsonld_preview']['negate']['#options'] = [
    t('Show for the listed pages'),
    t('Hide for the listed pages'),
  ];

  $form['#submit'][] = 'schemadotorg_jsonld_preview_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_jsonld_settings_form().
 *
 * @see schemadotorg_jsonld_preview_form_schemadotorg_jsonld_settings_form_alter()
 */
function schemadotorg_jsonld_preview_settings_form_submit(&$form, FormStateInterface $form_state) {
  $cache_backends = Cache::getBins();
  if (isset($cache_backends['dynamic_page_cache'])) {
    $cache_backends['dynamic_page_cache']->deleteAll();
  }

  \Drupal::configFactory()->getEditable('schemadotorg_jsonld_preview.settings')
    ->set('request_path', $form_state->getValue('schemadotorg_jsonld_preview'))
    ->save();
}

/**
 * Implements hook_preprocess_html().
 */
function schemadotorg_jsonld_preview_preprocess_html(array &$variables) {
  /** @var \Drupal\schemadotorg_jsonld_preview\SchemaDotOrgJsonLdPreviewAccessCheckerInterface $access_checker */
  $access_checker = \Drupal::service('schemadotorg_jsonld_preview.access_checker');
  if (!$access_checker->access()) {
    return;
  }

  /** @var \Drupal\schemadotorg_jsonld_preview\SchemaDotOrgJsonLdPreviewBuilderInterface $preview_builder */
  $preview_builder = \Drupal::service('schemadotorg_jsonld_preview.builder');
  $build = $preview_builder->build();

  // Make sure the cache is cleared when any Schema.org mapping is updated.
  // @todo Determine how best to invalidate cache when a mapping is updated.
  $mapping_definition = \Drupal::entityTypeManager()->getDefinition('schemadotorg_mapping');
  $build += ['#cache' => []];
  $build['#cache'] += ['tags' => []];
  $build['#cache']['tags'] = array_merge($build['#cache']['tags'], $mapping_definition->getListCacheTags());

  if ($build) {
    $variables['page']['content']['schemadotorg_jsonid_preview'] = $build;
  }
}

