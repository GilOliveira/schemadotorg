<?php

/**
 * @file
 * Allows users to preview a web page's Schema.org JSON-LD.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Url;

/**
 * Implements hook_entity_view_alter().
 */
function schemadotorg_jsonld_preview_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
  // Only display the JSON-LD on an entity's full page view mode.
  if ($build['#view_mode'] !== 'full') {
    return;
  }

  // Check that the current user can view the Schema.org JSON-LD.
  if (!\Drupal::currentUser()->hasPermission('view schemadotorg jsonld')) {
    return;
  }

  // Get the current route's entity and make sure it is being viewed.
  $route_entity = schemadotorg_jsonld_get_route_entity();
  if (!$route_entity || ($route_entity !== $entity)) {
    return;
  }

  // Build the entity's Schema.org data.
  /** @var \Drupal\schemadotorg_jsonld\SchemaDotOrgJsonLdBuilderInterface $builder */
  $builder = \Drupal::service('schemadotorg_jsonld.builder');
  $data = $builder->build($entity);
  if (!$data) {
    return;
  }

  // Display the JSON-LD using a details element.
  $build['schemadotorg_jsonid_preview'] = [
    '#type' => 'details',
    '#title' => t('Schema.org JSON-LD'),
    '#weight' => 1000,
    '#attributes' => ['class' => ['schemadotorg-jsonld-preview', 'js-schemadotorg-jsonld-preview']],
    '#attached' => ['library' => ['schemadotorg_jsonld_preview/schemadotorg_jsonld_preview']],
  ];

  // Make it easy for someone to copy the JSON.
  $t_args = [':href' => 'https://validator.schema.org/'];
  $description = t('Please copy-n-paste the below JSON-LD into the <a href=":href">Schema Markup Validator</a>.', $t_args);
  $build['schemadotorg_jsonid_preview']['copy'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['schemadotorg-jsonld-preview-copy']],
    'description' => [
      '#type' => 'container',
      '#markup' => $description,
    ],
    'button' => [
      '#type' => 'button',
      '#button_type' => 'small',
      '#attributes' => ['class' => ['schemadotorg-jsonld-preview-copy-button', 'button--extrasmall']],
      '#value' => t('Copy JSON-LD'),
    ],
    'message' => [
      '#type' => 'html_tag',
      '#tag' => 'span',
      '#attributes' => ['class' => ['schemadotorg-jsonld-preview-copy-message']],
      '#plain_text' => t('JSON-LD copied to clipboardâ€¦'),
    ],
  ];

  // JSON.
  // Make the JSON pretty and enhance it.
  $json = json_encode($data, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
  // Escape HTML special characters.
  $json_markup = htmlspecialchars($json);
  // Add <span> tag to properties.
  $json_markup = preg_replace('/&quot;([^&]+)&quot;: /', '<span>&quot;$1&quot;</span>: ', $json_markup);
  // Add links to URLs.
  $json_markup = preg_replace('@(https?://([-\w\.]+)+(:\d+)?(/([\w/_\.-]*(\?\S+)?)?)?)@', '<a href="$1">$1</a>', $json_markup);
  $build['schemadotorg_jsonid_preview']['json'] = [
    'input' => [
      '#type' => 'hidden',
      '#value' => $json,
    ],
    'code' => [
      '#type' => 'html_tag',
      '#tag' => 'pre',
      '#attributes' => ['class' => ['schemadotorg-jsonld-preview-code']],
      '#value' => $json_markup,
    ],
  ];

  // JSON-LD endpoint.
  // @see schemadotorg_jsonld_endpoint.module
  if (\Drupal::moduleHandler()->moduleExists('schemadotorg_jsonld_endpoint')) {
    $jsonld_url = Url::fromRoute(
      'schemadotorg_jsonld_endpoint.' . $entity->getEntityTypeId(),
      ['entity' => $entity->uuid()],
      ['absolute' => TRUE],
    );
    $build['schemadotorg_jsonid_preview']['uri'] = [
      '#type' => 'link',
      '#url' => $jsonld_url,
      '#title' => $jsonld_url->toString(),
      '#prefix' => t('JSON-LD endpoints:') . ' ',
    ];
  }
}
