<?php

/**
 * @file
 * Allows FlexFields to be used to create Schema.org relationships.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;
use Drupal\Core\Field\FieldItemInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_schemadotorg_property_field_type_alter().
 */
function schemadotorg_flexfield_schemadotorg_property_field_type_alter(array &$field_types, $property) {
  $config = \Drupal::config('schemadotorg_flexfield.settings');
  if ($config->get('default_properties.' . $property)) {
    $field_types = ['flex' => 'flex'] + $field_types;
  }
}

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_flexfield_schemadotorg_property_field_alter(
  $property,
  array &$field_storage_values,
  array &$field_values,
  &$widget_id,
  array &$widget_settings,
  &$formatter_id,
  array &$formatter_settings
) {
  // Make sure the field type is set to 'flex' (field).
  if ($field_storage_values['type'] !== 'flex') {
    return;
  }

  // Check to see if the property has flex field settings.
  $config = \Drupal::config('schemadotorg_flexfield.settings');
  if (!$config->get('default_properties.' . $property)) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = \Drupal::service('schemadotorg.names');
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  $flexfield_schema_properties = $config->get('default_properties.' . $property . '.properties') ?: [];
  $schema_properties = $schema_type_manager->getProperties(array_keys($flexfield_schema_properties));

  $weight = 0;
  $field_storage_columns = [];
  $field_settings = [];
  foreach ($flexfield_schema_properties as $property => $data_type) {
    $name = $schema_names->camelCaseToSnakeCase($property);
    $label = $schema_names->camelCaseToSentenceCase($property);
    $description = (isset($schema_properties[$property]))
      ? $schema_properties[$property]['comment']
      : '';

    $field_storage_columns[$name] = [
      'name' => $name,
      'max_length' => '255'
    ];

    $field_settings[$name] = [
      'type' => $data_type,
      'widget_settings' => [
        'label' => $label,
        'description' => $description,
        'required' => 0,
      ],
      'check_empty' => '1',
      'weight' => $weight,
    ];
    $weight++;
  }

  $field_storage_values['settings']['columns'] = $field_storage_columns;

  $field_values['settings'] = [
    'field_settings' => $field_settings,
    'field_type' => 'flex',
  ];

  $widget_id = 'flex_stacked';
  $widget_settings['label'] = '1';
}

/**
 * Implements hook_schemadotorg_jsonld_field_item_alter().
 */
function schemadotorg_flexfield_schemadotorg_jsonld_schema_property_alter(&$value, FieldItemInterface $item) {
  $mapping = _schemadotorg_flexfield_get_mapping($item);
  if (!$mapping) {
    return;
  }

  $field_name = $item->getFieldDefinition()->getName();
  $schema_property = $mapping->getSchemaPropertyMapping($field_name);

  // Check to see if the property has flex field settings.
  $config = \Drupal::config('schemadotorg_flexfield.settings');
  if (!$config->get('default_properties.' . $schema_property)) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = Drupal::service('schemadotorg.names');

  $schema_type = $config->get('default_properties.' . $schema_property . '.type');

  $data = ['@type' => $schema_type];
  $values = $item->getValue();
  foreach ($values as $item_key => $item_value) {
    $item_property = $schema_names->snakeCaseToCamelCase($item_key);
    $has_value = ($item_value !== '' && $item_value !== NULL);
    $is_property = $schema_type_manager->isProperty($item_property);
    if (!$has_value || !$is_property) {
      continue;
    }

    $unit = _schemadotorg_flexfield_get_property_unit($item_property, $item_value);
    if ($unit) {
      $item_value .= ' ' . $unit;
    }

    $data[$item_property] = $item_value;
  }
  $value = $data;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_flexfield_form_schemadotorg_properties_settings_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('schemadotorg_flexfield.settings');

  $form['flexfield_default_properties'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::ASSOCIATIVE_GROUPED_NAMED,
    '#settings_format' => 'propertyName|SchemaType|propertyName01:data_type,propertyName02:data_type,propertyName03:data_type',
    '#group_name' => 'type',
    '#array_name' => 'properties',
    '#title' => t('Default flex field properties'),
    '#description' => t('Enter Schema.org properties that should be mapped to a Schema.org type using a Flex field.'),
    '#default_value' => $config->get('default_properties'),
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_flexfield_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_flexfield_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_flexfield_settings_form_submit(&$form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('schemadotorg_flexfield.settings')
    ->set('default_properties', $form_state->getValue('flexfield_default_properties'))
    ->save();
}

/**
 * Implements hook_field_widget_form_alter().
 */
function schemadotorg_flexfield_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldItemListInterface $items */
  $items = $context['items'];
  $mapping = _schemadotorg_flexfield_get_mapping($items);
  if (!$mapping) {
    return;
  }

  $field_name = $items->getFieldDefinition()->getName();
  $schema_property = $mapping->getSchemaPropertyMapping($field_name);

  // Check to see if the property has flex field settings.
  $config = \Drupal::config('schemadotorg_flexfield.settings');
  if (!$config->get('default_properties.' . $schema_property)) {
    return;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = Drupal::service('schemadotorg.names');

  $children = Element::children($element);
  foreach ($children as $child_key) {
    $property = $schema_names->snakeCaseToCamelCase($child_key);
    $unit = _schemadotorg_flexfield_get_property_unit($property);
    if ($unit) {
      $element[$child_key]['#field_suffix'] = $unit;
    }
  }
}

/**
 * Preprocess variables for flexfield.html.twig
 */
function schemadotorg_flexfield_preprocess_flexfield(&$variables) {
  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = Drupal::service('schemadotorg.names');

  foreach ($variables['items'] as &$item) {
    // Append property unit to numeric value.
    $property = $schema_names->snakeCaseToCamelCase($item['name']);
    $unit = _schemadotorg_flexfield_get_property_unit($property, $item['value']);
    if ($unit) {
      $item['value'] .= ' ' . $unit;
    }
  }
}

/* ************************************************************************** */
// Internal functions.
/* ************************************************************************** */

/**
 * Get a flex field's Schema.org mapping.
 *
 * @param \Drupal\Core\Field\FieldItemListInterface|\Drupal\Core\Field\FieldItemInterface $item
 *   A flex field item or flex field items.
 *
 * @return \Drupal\schemadotorg\SchemaDotOrgMappingInterface|null
 *   A Schema.org mapping.
 *
 * @internal
 */
function _schemadotorg_flexfield_get_mapping($item) {
  $field_type = $item->getFieldDefinition()->getType();
  // Make sure the field type is set to 'flex' (field).
  if ($field_type !== 'flex') {
    return NULL;
  }

  // Get the Schema.org mapping for the entity.
  $entity = $item->getEntity();
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
  $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
  return $mapping_storage->loadByEntity($entity);
}

/**
 * Gets Schema.org property unit.
 *
 * @param string $property
 *   The Schema.org property.
 * @param $value
 *   The numeric value
 *
 * @return string|null
 *   The Schema.org property unit.
 *
 * @internal
 */
function _schemadotorg_flexfield_get_property_unit($property, $value = NULL) {
  if (!is_numeric($value) && $value !== NULL) {
    return NULL;
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');

  $property_definition = $schema_type_manager->getItem('properties', $property);
  if (!$property_definition) {
    return NULL;
  }

  $range_includes = ['https://schema.org/Energy', 'https://schema.org/Mass'];
  if (!in_array($property_definition['range_includes'], $range_includes)) {
    return NULL;
  }

  preg_match('/\b(grams|milligrams|calories)\b/', $property_definition['comment'], $match);
  $unit = $match[1] ?? NULL;

  switch ($unit) {
    case 'grams':
      return ($value == '1') ? t('gram') : t('grams');

    case 'milligrams':
      return ($value == '1') ? t('milligram') : t('milligrams');

    case 'calories':
      return ($value == '1') ? t('calorie') : t('calories');

    default:
      return NULL;
  }
}
