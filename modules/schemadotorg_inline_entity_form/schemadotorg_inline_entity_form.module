<?php

/**
 * @file
 * Allows Inline Entity Forms to be used to create Schema.org relationships.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\schemadotorg\Element\SchemaDotOrgSettings;

/**
 * Implements hook_schemadotorg_property_field_alter().
 */
function schemadotorg_inline_entity_form_schemadotorg_property_field_alter(
  $type,
  $property,
  array &$field_storage_values,
  array &$field_values,
  &$widget_id,
  array &$widget_settings,
  &$formatter_id,
  array &$formatter_settings
) {
  if ($field_storage_values['type'] !== 'entity_reference'
    || !_schemadotorg_inline_entity_form_enabled($type, $property)) {
    return;
  }

  $widget_id = 'inline_entity_form_complex';
  $widget_settings = [
    'allow_existing' => TRUE,
    'allow_duplicate' => TRUE,
    'collapsible' => TRUE,
    'revision' => TRUE,
  ];

  // Use content browser if it is available.
  if (\Drupal::moduleHandler()->moduleExists('entity_browser_entity_form')
    && \Drupal::moduleHandler()->moduleExists('content_browser')) {
    $widget_settings['third_party_settings'] = [
      'entity_browser_entity_form' => [
        'entity_browser_id' => 'browse_content',
      ],
    ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function schemadotorg_inline_entity_form_form_schemadotorg_properties_settings_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::configFactory()->getEditable('schemadotorg_inline_entity_form.settings');

  $form['inline_entity_form_default_properties'] = [
    '#type' => 'schemadotorg_settings',
    '#settings_type' => SchemaDotOrgSettings::INDEXED,
    '#settings_format' => 'propertyName or SchemaType--propertyName',
    '#title' => t('Default inline entity form properties'),
    '#description' => t('Enter Schema.org properties that should use the inline entity form.'),
    '#default_value' => $config->get('default_properties'),
  ];

  // Add submit callback.
  $form['#submit'][] = 'schemadotorg_inline_entity_form_settings_form_submit';
}

/**
 * Form submission handler for schemadotorg_properties_settings_form.
 *
 * @see schemadotorg_inline_entity_form_form_schemadotorg_properties_settings_form_alter()
 */
function schemadotorg_inline_entity_form_settings_form_submit(&$form, FormStateInterface $form_state) {
  \Drupal::configFactory()->getEditable('schemadotorg_inline_entity_form.settings')
    ->set('default_properties', $form_state->getValue('inline_entity_form_default_properties'))
    ->save();
}

/**
 * Determine if the inline entity form should be used for Schema.org property.
 *
 * @param string $type
 *   The Schema.org type.
 * @param string $property
 *   The Schema.org property.
 *
 * @return bool
 *   TRUE if the inline entity form should be used for Schema.org property.
 */
function _schemadotorg_inline_entity_form_enabled($type, $property) {
  $default_properties = \Drupal::config('schemadotorg_inline_entity_form.settings')
    ->get('default_properties');

  // Check the property.
  if (in_array($property, $default_properties)) {
    return TRUE;
  }

  // Check for the {type}--{property} in the type's breadcrumbs.
  /** @var \Drupal\schemadotorg\SchemaDotOrgSchemaTypeManagerInterface $schema_type_manager */
  $schema_type_manager = \Drupal::service('schemadotorg.schema_type_manager');
  $breadcrumbs = $schema_type_manager->getTypeBreadcrumbs($type);
  foreach ($breadcrumbs as $breadcrumb) {
    $breadcrumb = array_reverse($breadcrumb);
    foreach ($breadcrumb as $breadcrumb_type) {
      if (in_array("$breadcrumb_type--$property", $default_properties)) {
        return TRUE;
      }
    }
  }
  return FALSE;
}
