<?php

/**
 * @file
 * Install, update and uninstall functions for the Schema.org Standard module.
 */

use Drupal\consumers\Entity\Consumer;
use Drupal\path_alias\Entity\PathAlias;

/**
 * Implements hook_install().
 */
function schemadotorg_standard_install() {
  // Add image styles to the 'Default Consumer'.
  $consumer = Consumer::load(1);
  if ($consumer) {
    $consumer->get('image_styles')->setValue([
      ['target_id' => 'large'],
      ['target_id' => 'medium'],
      ['target_id' => 'thumbnail'],
    ]);
    $consumer->save();
  }

  // Create a path alias for /api/documentation.
  PathAlias::create([
    'alias' => '/api/documentation',
    'path' => '/admin/config/services/openapi/redoc/jsonapi',
    'langcode' => 'en',
  ])->save();

  /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
  $theme_installer = \Drupal::service('theme_installer');
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $module_installer */
  $module_installer = \Drupal::service('module_installer');

  // Enable the Gin admin theme and related modules.
  $theme_installer->install(['gin']);
  $module_installer->install(['gin_login', 'gin_toolbar']);

  // Configure the Gin admin theme.
  \Drupal::configFactory()->getEditable('system.theme')
    ->set('default', 'gin')
    ->set('admin', 'gin')
    ->save();
  \Drupal::configFactory()->getEditable('system.theme.global')
    ->set('features.node_user_picture', FALSE)
    ->save();
  \Drupal::configFactory()->getEditable('gin.settings')
    ->set('classic_toolbar', 'horizontal')
    ->set('show_description_toggle', TRUE)
    ->save();

  // Uninstall unused themes.
  $themes = ['bartik', 'olivero', 'seven'];
  $themes = array_combine($themes, $themes);
  foreach ($themes as $theme) {
    if (!$theme_handler->themeExists($theme)) {
      unset($themes[$theme]);
    }
  }
  if ($themes) {
    $theme_installer->uninstall($themes);
  }

  // Configure development settings.
  \Drupal::configFactory()->getEditable('system.logging')
    ->set('error_level', 'verbose')
    ->save();
  \Drupal::configFactory()->getEditable('devel.settings')
    ->set('dumper', 'kint')
    ->save();
}
