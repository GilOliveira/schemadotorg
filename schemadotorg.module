<?php

/**
 * @file
 * Primary module hooks for Schema.org module.
 */

use Drupal\Component\Utility\NestedArray;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;

require_once __DIR__ . '/includes/schemadotorg.allowed_values.inc';

/**
 * Implements hook_help().
 */
function schemadotorg_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'entity.schemadotorg_mapping.collection':
      $uri = Url::fromRoute('help.page', ['name' => 'schemadotorg'])->toString();
      return '<p>'
        . t('The <strong>Schema.org mappings</strong> page lists all available mappings from Drupal entity types to Schema.org types.')
        . '<br/>'
        . '<a href="' . $uri . '">' . t('Learn more about the Schema.org Blueprints module') . '</a>'
        . '<p>';

    case 'entity.schemadotorg_mapping_type.collection':
      return '<p>' . t('The <strong>Schema.org mapping types</strong> page lists all available mapping types with default settings for available Drupal entity types.') . '<p>';

    case 'schemadotorg.settings.types':
      return '<p>' . t('The <strong>Schema.org types settings</strong> page allows administrators to configure the default settings for Schema.org types.') . '<p>';

    case 'schemadotorg.settings':
      return '<p>' . t('The <strong>Schema.org settings</strong> page allows administrators to configure the default settings for the Schema.org Blueprints module.') . '<p>';

    case 'schemadotorg.settings.properties':
      return '<p>' . t('The <strong>Schema.org properties settings</strong> page allows administrators to configure the default settings for Schema.org properties.') . '<p>';

    case 'schemadotorg.settings.names':
      $t_args = [
        ':href' => 'https://schema.org/docs/styleguide.html',
      ];
      return '<p>'
        . t("The <strong>Schema.org names settings</strong> page allows administrators to configure how Schema.org's <a href=\":href\">naming conventions</a> for types and properties are converted to Drupal's naming conventions.", $t_args)
        . ' '
        . t('For example, Schema.org uses camel case (camelCase) and Drupal uses snake case (snake_case) and Drupal limits all entity ids and field names to 32 characters.')
        . '<p>';
  }

  /** @var \Drupal\schemadotorg\SchemaDotOrgHelpManagerInterface $help_manager */
  $help_manager = \Drupal::service('schemadotorg.help_manager');
  return $help_manager->build($route_name, $route_match);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Display a warning on the entity revision configuration page when the
 * expected Schema.org target bundles do not match the selected target bundles.
 */
function schemadotorg_form_field_config_edit_form_alter(&$form, FormStateInterface $form_state) {
  // Only display the warning via a GET form request.
  if (!\Drupal::request()->isMethod('GET')) {
    return;
  }

  /** @var \Drupal\field_ui\Form\FieldConfigEditForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\field\FieldConfigInterface $field */
  $field = $form_object->getEntity();

  // Check the field type is an entity reference field.
  if (!in_array($field->getType(), ['entity_reference', 'entity_reference_revisions'])) {
    return;
  }

  // Get the field's related Schema.org mapping.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
  $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
  $entity_type_id = $field->getTargetEntityTypeId();
  $bundle = $field->getTargetBundle();
  $mapping = $mapping_storage->load("$entity_type_id.$bundle");
  if (!$mapping) {
    return;
  }

  // Get the field's Schema.org property.
  $field_name = $field->getName();
  $schema_type = $mapping->getSchemaType();
  $schema_property = $mapping->getSchemaPropertyMapping($field_name);
  if (!$schema_property) {
    return;
  }

  // Get expected target bundles.
  $target_type = $field->getSetting('target_type');
  $expected_target_bundles = $mapping_storage->getSchemaPropertyTargetBundles($target_type, $schema_type, $schema_property);

  // Get actual target bundles.
  $handler_settings = $field->getSetting('handler_settings');
  $actual_target_bundles = $handler_settings['target_bundles'];

  // Display warning when the expected and selected bundles do not match.
  if ($expected_target_bundles != $actual_target_bundles) {
    $target_label = ($target_type === 'paragraph')
      ? t('Paragraph types')
      : \Drupal::entityTypeManager()->getDefinition($target_type)->getPluralLabel();

    /** @var \Drupal\Core\Entity\EntityTypeBundleInfoInterface $bundle_info */
    $entity_type_bundle_info = \Drupal::service('entity_type.bundle.info');
    $bundle_info = $entity_type_bundle_info->getBundleInfo($target_type);
    $bundles = [];
    foreach ($expected_target_bundles as $schema_target_bundle) {
      $bundles[] = NestedArray::getValue($bundle_info, [$schema_target_bundle, 'label']) ?: $schema_target_bundle;
    }

    $t_args = [
      '@type' => $target_label,
      '%bundles' => implode('; ', $bundles),
    ];
    $message = t('The expected @type should include %bundles.', $t_args);
    \Drupal::messenger()->addWarning($message);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @todo Move this to SchemaDotOrgMapping::onDependencyRemoval.
 * @see \Drupal\schemadotorg\Entity\SchemaDotOrgMapping::onDependencyRemoval
 */
function schemadotorg_field_config_delete(EntityInterface $entity) {
  $bundle = $entity->getTargetBundle();
  $entity_type = $entity->getTargetEntityTypeId();

  // Make sure a property is removed.
  /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
  $mapping = SchemaDotOrgMapping::load("$entity_type.$bundle");
  if ($mapping) {
    $mapping->removeSchemaProperty($entity->getName());
  }
}
