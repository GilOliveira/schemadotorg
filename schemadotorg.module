<?php

/**
 * @file
 * Primary module hooks for Schema.org module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\schemadotorg\Entity\SchemaDotOrgMapping;

require_once __DIR__ . '/includes/schemadotorg.allowed_values.inc';

/**
 * Hook_entity_reference_selection_alter().
 */
function schemadotorg_entity_reference_selection_alter(array &$definitions) {
  if (isset($definitions['schemadotorg_range_includes'])) {
    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingTypeStorageInterface $mapping_type_storage */
    $mapping_type_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping_type');
    $definitions['schemadotorg_range_includes']['entity_types'] = $mapping_type_storage->getEntityTypesWithBundles();
  }
}

/**
 * Implements hook_ENTITY_TYPE_load().
 */
function schemadotorg_field_config_load(array $entities) {
  /** @var \Drupal\field\FieldConfigInterface $entity */
  // Dynamically set the 'target_bundles' for fields that use the
  // 'schemadotorg_range_includes' selection handler.
  //
  // The 'target_bundles' are required for the media library widget.
  // @see \Drupal\media_library\Plugin\Field\FieldWidget\MediaLibraryWidget::formElement
  foreach ($entities as $entity) {
    if ($entity->getType() !== 'entity_reference') {
      continue;
    }

    $handler = $entity->getSetting('handler') ?? '';
    if ($handler !== 'schemadotorg_range_includes') {
      continue;
    }

    $settings = $entity->get('settings');

    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingStorageInterface $mapping_storage */
    $mapping_storage = \Drupal::entityTypeManager()->getStorage('schemadotorg_mapping');
    $target_bundles = $mapping_storage->getSchemaPropertyTargetBundles(
      $entity->getTargetEntityTypeId(),
      $entity->getTargetBundle(),
      $entity->getName(),
      $settings['handler_settings']['target_type']
    );
    $settings['handler_settings']['target_bundles'] = $target_bundles;

    $entity->set('settings', $settings);
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function schemadotorg_field_config_presave(EntityInterface $entity) {
  // Add field mapping to SchemaDotOrgTypeSelection handler settings
  // so that we can use it to find the mapping property's
  // related Schema.org types.
  //
  // @see \Drupal\schemadotorg\Plugin\EntityReferenceSelection\SchemaDotOrgTypeSelection
  /** @var \Drupal\field\FieldConfigInterface $entity */
  if ($entity->getType() === 'entity_reference'
    && strpos($entity->getSetting('handler'), 'schemadotorg_') === 0) {

    $settings = $entity->getSettings();
    $settings['handler_settings']['schemadotorg_mapping'] = [
      'entity_type' => $entity->getTargetEntityTypeId(),
      'bundle' => $entity->getTargetBundle(),
      'field_name' => $entity->getName()
    ];

    // Remove duplicate target type which is break config inspection.
    // The $settings['handler_settings'] already tracks the target type.
    // @todo Determine why target type is being set.
    unset($settings['target_type']);
    $entity->set('settings', $settings);
  }
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * @todo Move this to SchemaDotOrgMapping::onDependencyRemoval.
 * @see \Drupal\schemadotorg\Entity\SchemaDotOrgMapping::onDependencyRemoval
 */
function schemadotorg_field_config_delete(EntityInterface $entity) {
  /** @var \Drupal\schemadotorg\SchemaDotOrgNamesInterface $schema_names */
  $schema_names = \Drupal::service('schemadotorg.names');

  /** @var \Drupal\field\FieldConfigInterface $entity */
  if ($entity->getName() === $schema_names->getSubtypeFieldName()) {
    $entity_type = $entity->getTargetEntityTypeId();
    $bundle = $entity->getTargetBundle();
    /** @var \Drupal\schemadotorg\SchemaDotOrgMappingInterface $mapping */
    $mapping = SchemaDotOrgMapping::load("$entity_type.$bundle");
    if ($mapping) {
      $mapping->setSchemaSubtype(FALSE)->save();
    }
  }
}
